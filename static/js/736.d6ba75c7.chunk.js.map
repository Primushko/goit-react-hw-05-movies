{"version":3,"file":"static/js/736.d6ba75c7.chunk.js","mappings":"gQAEaA,EAAOC,EAAAA,EAAAA,GAAH,kDAIJC,EAAOD,EAAAA,EAAAA,EAAH,yF,SCwDjB,EAxDa,WAGX,IAAQE,GAAYC,EAAAA,EAAAA,MAAZD,QAER,GAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAGA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KAyBA,OApBAC,EAAAA,EAAAA,YAAU,WAEND,GAAW,IAEXE,EAAAA,EAAAA,IAAYR,GACTS,MAAK,SAAAN,GACJC,EAAUD,EACX,IACAO,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EACb,IACAG,SAAQ,WACPR,GAAW,EACZ,GAKN,GAAE,CAACN,KAGF,2BACGK,IAAW,SAACU,EAAA,EAAD,KACZ,SAAClB,EAAD,UACGM,EAAOa,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,cAAeC,EAApC,EAAoCA,KAAMC,EAA1C,EAA0CA,UAA1C,OACV,2BACE,gBACEC,MAAM,QACNC,IACEL,EAAY,yCAC0BA,GAD1B,oDAIdM,IAAKL,KAEP,SAACpB,EAAD,UAAOqB,KACP,UAACrB,EAAD,WAAM,cAAYsB,OAXXJ,EADC,QAkBnB,C,mMC3DDQ,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAU,mCAEHC,EAAa,mCAAG,oGACJF,EAAAA,EAAAA,IAAA,qCAAwCC,IADpC,cACrBE,EADqB,yBAEpBA,EAASC,KAAKC,SAFM,2CAAH,qDAKbC,EAAoB,mCAAG,WAAMC,GAAN,uFACXP,EAAAA,EAAAA,IAAA,+BACGC,EADH,4DAC8DM,IAFnD,cAC5BJ,EAD4B,yBAI3BA,EAASC,KAAKC,SAJa,2CAAH,sDAOpBG,EAAiB,mCAAG,WAAMjC,GAAN,uFACRyB,EAAAA,EAAAA,IAAA,gBACZzB,EADY,oBACO0B,EADP,oBADQ,cACzBE,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,sDAOjBrB,EAAW,mCAAG,WAAMR,GAAN,uFACFyB,EAAAA,EAAAA,IAAA,gBACZzB,EADY,4BACe0B,EADf,oBADE,cACnBE,EADmB,yBAIlBA,EAASC,KAAKK,MAJI,2CAAH,sDAOXC,EAAY,mCAAG,WAAMnC,GAAN,uFACHyB,EAAAA,EAAAA,IAAA,gBACZzB,EADY,4BACe0B,EADf,2BADG,cACpBE,EADoB,yBAInBA,EAASC,KAAKC,SAJK,2CAAH,qD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/Api.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  list-style-type: none;\n`;\n\nexport const Text = styled.p`\n  font-weight: 600;\n  font-size: 18px;\n  margin-bottom: 10px;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { fetchActors } from 'services/Api';\nimport Loader from 'components/Loader/Loader';\nimport { List, Text } from './Cast.styled';\n\nconst Cast = () => {\n  // використовується `useParams()` для отримання параметру`movieId` з URL.\n  // вказує на ідентифікатор фільму, для якого потрібно отримати акторів.\n  const { movieId } = useParams();\n  // `actors` буде містити отриманих акторів\n  const [actors, setActors] = useState([]);\n  // `loading` вказує, чи відбувається процес завантаження\n  // (true - завантаження, false - завантаження завершено).\n  const [loading, setLoading] = useState(false);\n\n  // useEffect - відбувається завантаження акторів,з допомогою `fetchActors` і розміщення результату у стан `actors`.\n  // Якщо виникає помилка, вона виводиться у консоль. Незалежно від успіху або невдачі завантаження акторів,\n  // стан `loading` оновлюється на протилежне значення.\n  useEffect(() => {\n    const onActorsOfMovie = () => {\n      setLoading(true);\n\n      fetchActors(movieId)\n        .then(actors => {\n          setActors(actors);\n        })\n        .catch(error => {\n          console.log(error);\n        })\n        .finally(() => {\n          setLoading(false);\n        });\n    };\n    // при зміні `movieId` всередині ефекту виконується функція `onActorsOfMovie()\n    // яка встановлює `loading` на `true`, щоб показати процес завантаження.\n    onActorsOfMovie();\n  }, [movieId]);\n\n  return (\n    <div>\n      {loading && <Loader />}\n      <List>\n        {actors.map(({ id, profile_path, original_name, name, character }) => (\n          <li key={id}>\n            <img\n              width=\"200px\"\n              src={\n                profile_path\n                  ? `https://image.tmdb.org/t/p/w500${profile_path}`\n                  : `https://via.placeholder.com/200x300?text=No+Image`\n              }\n              alt={original_name}\n            />\n            <Text>{name}</Text>\n            <Text>Character: {character}</Text>\n          </li>\n        ))}\n      </List>\n    </div>\n  );\n};\nexport default Cast;\n// - `id` - унікальний ідентифікатор актора.\n// - `profile_path` - шлях до зображення актора.\n// - `original_name` - оригінальне ім'я актора.\n// - `name` - ім'я актора.\n// - `character` - персонаж, який актор виконує.\n","import axios from 'axios';\n// базова URL-адреса для викликів AP\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n// ключ\nconst API_KEY = 'd6edcad997ee9c808a30a1ff00b87277';\n// список найпопулярніших фільмів на сьогодні для створення колекції на головній сторінці.\nexport const fetchTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n// пошук фільму за ключовим словом на сторінці фільмів.(keyword)\nexport const fetchSearchByKeyword = async keyword => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${keyword}`\n  );\n  return response.data.results;\n};\n// запит повної інформації про фільм для сторінки кінофільму.\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n// запит інформації про акторський склад для сторінки кінофільму.\nexport const fetchActors = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n// запит оглядів для сторінки кінофільму.\nexport const fetchReviews = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n"],"names":["List","styled","Text","movieId","useParams","useState","actors","setActors","loading","setLoading","useEffect","fetchActors","then","catch","error","console","log","finally","Loader","map","id","profile_path","original_name","name","character","width","src","alt","axios","API_KEY","fetchTrending","response","data","results","fetchSearchByKeyword","keyword","fetchMovieDetails","cast","fetchReviews"],"sourceRoot":""}