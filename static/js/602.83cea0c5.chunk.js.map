{"version":3,"file":"static/js/602.83cea0c5.chunk.js","mappings":"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","sources":["pages/EditorList/EditorList.styled.jsx","pages/EditorList/EditorList.jsx","components/Form/Form.styled.jsx","components/Form/Form.jsx","pages/Movies/Movies.jsx","services/Api.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  list-style-type: none;\n`;\n\nexport const Item = styled.li`\n  font-weight: 600;\n  font-size: 18px;\n  margin-bottom: 10px;\n`;\n\nexport const MovieLink = styled(Link)`\n  text-decoration: none;\n  color: #191d1e;\n\n  &:hover {\n    color: #3a28fc;\n  }\n`;\n","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { List, Item, MovieLink } from './EditorList.styled';\n// компонент EditorList для відображення списку фільмів\nconst EditorList = ({ films }) => {\n  // хук useLocation для отримання об'єкта локації, який зберігається у змінній location.\n  const location = useLocation();\n\n  return (\n    <List>\n      {/* Метод map, що ітерується по кожному об'єкту film в масиві films. */}\n      {films.map(film => (\n        //створюємо елемент <Item> з унікальним ключем key={film.id}\n        <Item key={film.id}>\n          {/* MovieLink створює посилання на сторінку фільму з шляхом /movies/${film.id} */}\n          {/* передає об'єкт state з властивістю from, яка містить значення location. */}\n          <MovieLink to={`/movies/${film.id}`} state={{ from: location }}>\n            {/* Текстовий вміст фільму (film.title). */}\n            {film.title}\n          </MovieLink>\n        </Item>\n      ))}\n    </List>\n  );\n};\n// перевірка на типи пропсів\nEditorList.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n    })\n  ),\n};\n\nexport default EditorList;\n","import styled from '@emotion/styled';\n\nexport const SearchForm = styled.form`\n  display: flex;\n  align-items: center;\n`;\n\nexport const Input = styled.input`\n  padding: 12px 14px;\n  font: inherit;\n  cursor: pointer;\n  border-radius: 4px;\n  border: 3px solid #191d1e;\n  font-weight: 600;\n  font-size: 20px;\n  margin-right: 10px;\n  border-radius: 8px;\n  outline: none;\n\n  &:hover {\n    color: #3a28fc;\n    border: 3px solid #3a28fc;\n  }\n`;\n\nexport const Button = styled.button`\n  padding: 12px 12px;\n  font: inherit;\n  cursor: pointer;\n  border-radius: 4px;\n  border: 3px solid #191d1e;\n  color: #191d1e;\n  font-weight: 600;\n  font-size: 20px;\n  border-radius: 8px;\n\n  &:hover {\n    color: #3a28fc;\n    border: 3px solid #3a28fc;\n  }\n`;\n","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { SearchForm, Input, Button } from './Form.styled';\n\nconst Form = ({ searchMovies, query }) => {\n  const [inputQuery, setInputQuery] = useState('');\n\n  useEffect(() => {\n    setInputQuery(query);\n  }, [query]);\n\n  const handleInputChange = event => {\n    setInputQuery(event.target.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    searchMovies(inputQuery.toLowerCase());\n  };\n\n  return (\n    <SearchForm onSubmit={handleSubmit}>\n      <Input\n        type=\"text\"\n        name=\"query\"\n        autoFocus\n        value={inputQuery}\n        onChange={handleInputChange}\n      />\n      <Button type=\"submit\">Search</Button>\n    </SearchForm>\n  );\n};\n\nForm.propTypes = {\n  searchMovies: PropTypes.func.isRequired,\n  query: PropTypes.string.isRequired,\n};\n\nexport default Form;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport Loader from 'components/Loader/Loader';\nimport EditorList from 'pages/EditorList/EditorList';\nimport Form from 'components/Form/Form';\nimport { fetchSearchByKeyword } from 'services/Api';\n\nconst Movies = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [searchFilms, setSearchFilms] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [noMoviesText, setNoMoviesText] = useState(false);\n  const [query, setQuery] = useState('');\n\n  const searchMovies = useCallback(\n    queryMovie => {\n      setLoading(true);\n      fetchSearchByKeyword(queryMovie)\n        .then(searchResults => {\n          setSearchFilms(searchResults);\n          setNoMoviesText(searchResults.length === 0);\n          navigate(\n            queryMovie\n              ? `/movies?query=${encodeURIComponent(queryMovie)}`\n              : '/movies'\n          );\n        })\n        .catch(error => {\n          console.log(error);\n        })\n        .finally(() => {\n          setLoading(false);\n        });\n    },\n    [navigate]\n  );\n\n  useEffect(() => {\n    const queryMovie = new URLSearchParams(location.search).get('query');\n    if (queryMovie) {\n      setQuery(queryMovie);\n    }\n    searchMovies(queryMovie);\n  }, [location.search, searchMovies]);\n\n  useEffect(() => {\n    if (location.pathname === '/movies') {\n      const queryMovie = new URLSearchParams(location.search).get('query');\n      if (!queryMovie) {\n        setSearchFilms([]);\n      }\n    }\n  }, [location.pathname, location.search]);\n\n  return (\n    <main>\n      <Form searchMovies={searchMovies} query={query} />\n      {loading && <Loader />}\n      {noMoviesText && (\n        <p>THERE IS NO MOVIES WITH THIS REQUEST. PLEASE, TRY AGAIN!</p>\n      )}\n      {searchFilms && <EditorList films={searchFilms} />}\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n// базова URL-адреса для викликів AP\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n// ключ\nconst API_KEY = 'd6edcad997ee9c808a30a1ff00b87277';\n\n// список найпопулярніших фільмів на сьогодні для створення колекції на головній сторінці.\nexport const fetchTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\n// пошук фільму за ключовим словом на сторінці фільмів.(keyword)\nexport const fetchSearchByKeyword = async query => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n  return response.data.results;\n};\n\n// запит повної інформації про фільм для сторінки кінофільму.\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\n// запит інформації про акторський склад для сторінки кінофільму.\nexport const fetchActors = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\n// запит оглядів для сторінки кінофільму.\nexport const fetchReviews = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n"],"names":["List","styled","Item","MovieLink","Link","films","location","useLocation","map","film","to","id","state","from","title","SearchForm","Input","Button","searchMovies","query","useState","inputQuery","setInputQuery","useEffect","onSubmit","event","preventDefault","toLowerCase","type","name","autoFocus","value","onChange","target","navigate","useNavigate","searchFilms","setSearchFilms","loading","setLoading","noMoviesText","setNoMoviesText","setQuery","useCallback","queryMovie","fetchSearchByKeyword","then","searchResults","length","encodeURIComponent","catch","error","console","log","finally","URLSearchParams","search","get","pathname","Loader","EditorList","axios","API_KEY","fetchTrending","response","data","results","fetchMovieDetails","movieId","fetchActors","cast","fetchReviews"],"sourceRoot":""}