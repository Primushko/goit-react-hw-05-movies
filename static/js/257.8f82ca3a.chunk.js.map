{"version":3,"file":"static/js/257.8f82ca3a.chunk.js","mappings":"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","sources":["pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx","services/Api.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const Container = styled.div`\n  display: flex;\n  margin: 24px;\n  gap: 24px;\n`;\n\nexport const List = styled.ul`\n  display: inline-flex;\n  gap: 12px;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  list-style-type: none;\n`;\n\nexport const ListInfo = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  list-style-type: none;\n`;\n\nexport const LinkInfo = styled(Link)`\n  text-decoration: none;\n  font-weight: 600;\n  font-size: 24px;\n  color: #191d1e;\n\n  &:hover {\n    color: #3a28fc;\n  }\n`;\n\nexport const Button = styled.button`\n  padding: 8px 8px;\n  font: inherit;\n  cursor: pointer;\n  border-radius: 4px;\n  border: 3px solid #191d1e;\n  color: #191d1e;\n  font-weight: 600;\n  font-size: 20px;\n  border-radius: 8px;\n\n  &:hover {\n    color: #3a28fc;\n    border: 3px solid #3a28fc;\n  }\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams, Link, Outlet, useLocation } from 'react-router-dom';\nimport { Suspense } from 'react';\n// отримання деталей про фільм з API.\nimport { fetchMovieDetails } from 'services/Api';\nimport Loader from 'components/Loader/Loader';\nimport {\n  Container,\n  List,\n  ListInfo,\n  LinkInfo,\n  Button,\n} from './MovieDetails.styled';\n// `MovieDetails`отримує деталі про фільм з асинхронного джерела за допомогою функції `fetchMovieDetails`,\n//  відображає їх на сторінці та надає можливість навігувати до додаткової інформації про фільм.\nconst MovieDetails = () => {\n  //використовується для запиту деталей про конкретний фільм.\n  const { movieId } = useParams();\n  //  Цей стан використовується для зберігання деталей про фільм, які отримуються з `fetchMovieDetails`.\n  const [movieInfo, setMovieInfo] = useState(null);\n  //  стан `loading`, який використовується для відображення спінера під час завантаження даних\n  // `false`- означає, що спінер не відображається спочатку.\n  const [loading, setLoading] = useState(false);\n  // Використовується `useLocation()` для отримання поточного об'єкта `location`,\n  // який містить інформацію про поточну адресу URL та додаткові дані про стан.\n  const location = useLocation();\n  // під час першого рендерингу та при зміні `movieId`, виконується функція `fetchMovieDetailsFilms()`,\n  // яка отримує деталі про фільм та оновлює стан `movieInfo`.\n  useEffect(() => {\n    const fetchMovieDetailsFilms = () => {\n      setLoading(true);\n      fetchMovieDetails(movieId)\n        .then(detailMovie => {\n          setMovieInfo(detailMovie);\n        })\n        .catch(error => {\n          console.log(error);\n        })\n        .finally(() => {\n          setLoading(false);\n        });\n    };\n    fetchMovieDetailsFilms();\n  }, [movieId]);\n  //Якщо `movieInfo` є `null` (деталі про фільм ще не завантажені),\n  // компонент повертає `null` і нічого не відображається.\n  if (!movieInfo) {\n    return;\n  }\n  // відображає деталі про фільм, якщо movieInfo не є null.\n  // включає посилання для повернення назад, відображення постера фільму, назву, рейтинг, огляд\n  const {\n    title,\n    release_date,\n    popularity,\n    overview,\n    genres,\n    poster_path,\n    original_title,\n  } = movieInfo || {};\n\n  return (\n    <>\n      <Link to={location.state?.from ?? '/'}>\n        <Button type=\"button\">Go back</Button>\n      </Link>\n      {loading && <Loader />}\n      {movieInfo && (\n        <Container>\n          <img\n            width=\"300px\"\n            src={\n              poster_path\n                ? `https://image.tmdb.org/t/p/w500${poster_path}`\n                : `https://via.placeholder.com/200x300?text=No+Image`\n            }\n            alt={original_title}\n          />\n          <div>\n            <h1>\n              {title} ({release_date.slice(0, 4)})\n            </h1>\n            <p>User score: {popularity}</p>\n            <h2>Overview</h2>\n            <p>{overview}</p>\n            <h2>Genres</h2>\n            <List>\n              {genres.map(genre => (\n                <li key={genre.id}>{genre.name}</li>\n              ))}\n            </List>\n          </div>\n        </Container>\n      )}\n      <hr />\n      <div>\n        <h3>Additional information</h3>\n        <ListInfo>\n          <li>\n            <LinkInfo to=\"cast\">Cast</LinkInfo>\n          </li>\n          <li>\n            <LinkInfo to=\"reviews\">Reviews</LinkInfo>\n          </li>\n        </ListInfo>\n        <hr />\n        {/* `Suspense` використовується для організації лінивого завантаження компонентів */}\n        {/* якщо компоненти ще не завантажені, відображається компонент `Loader`(показує спінер) */}\n        <Suspense fallback={<Loader />}>\n          <Outlet />\n        </Suspense>\n      </div>\n    </>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n// базова URL-адреса для викликів AP\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n// ключ\nconst API_KEY = 'd6edcad997ee9c808a30a1ff00b87277';\n\n// список найпопулярніших фільмів на сьогодні для створення колекції на головній сторінці.\nexport const fetchTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\n// пошук фільму за ключовим словом на сторінці фільмів.(keyword)\nexport const fetchSearchByKeyword = async query => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n  return response.data.results;\n};\n\n// запит повної інформації про фільм для сторінки кінофільму.\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\n// запит інформації про акторський склад для сторінки кінофільму.\nexport const fetchActors = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\n// запит оглядів для сторінки кінофільму.\nexport const fetchReviews = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n"],"names":["Container","styled","List","ListInfo","LinkInfo","Link","Button","movieId","useParams","useState","movieInfo","setMovieInfo","loading","setLoading","location","useLocation","useEffect","fetchMovieDetails","then","detailMovie","catch","error","console","log","finally","title","release_date","popularity","overview","genres","poster_path","original_title","to","state","from","type","Loader","width","src","alt","slice","map","genre","name","id","Suspense","fallback","axios","API_KEY","fetchTrending","response","data","results","fetchSearchByKeyword","query","fetchActors","cast","fetchReviews"],"sourceRoot":""}