{"version":3,"file":"static/js/485.3e5ecaa2.chunk.js","mappings":"wNAGaA,EAAOC,EAAAA,EAAAA,GAAH,kDAIJC,EAAOD,EAAAA,EAAAA,GAAH,yFAMJE,GAAYF,EAAAA,EAAAA,GAAOG,EAAAA,GAAPH,CAAH,8G,SCsBtB,EA/BmB,SAAC,GAAe,IAAbI,EAAY,EAAZA,MAEdC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,SAACP,EAAD,UAEGK,EAAMG,KAAI,SAAAC,GAAI,OAEb,SAACP,EAAD,WAGE,SAACC,EAAD,CAAWO,GAAE,kBAAaD,EAAKE,IAAMC,MAAO,CAAEC,KAAMP,GAApD,SAEGG,EAAKK,SALCL,EAAKE,GAFH,KAapB,C,qICvBYI,E,QAAed,GAAAA,GAAH,2J,SC2CzB,EAlCa,WACX,OAA0Be,EAAAA,EAAAA,UAAS,IAAnC,eAAOX,EAAP,KAAcY,EAAd,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KAuBA,OArBAC,EAAAA,EAAAA,YAAU,WAEND,GAAW,IAGXE,EAAAA,EAAAA,MACGC,MAAK,SAAAC,GACJN,EAASM,EACV,IAEAC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EACb,IAEAG,SAAQ,WACPT,GAAW,EACZ,GAGN,GAAE,KAGD,6BACE,SAACJ,EAAD,UAAc,oBACd,SAACc,EAAA,EAAD,CAAYxB,MAAOA,IAClBa,IAAW,SAACY,EAAA,EAAD,MAGjB,C,mMCxCDC,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAU,mCAGHX,EAAa,mCAAG,oGACJU,EAAAA,EAAAA,IAAA,qCAAwCC,IADpC,cACrBC,EADqB,yBAEpBA,EAASC,KAAKC,SAFM,2CAAH,qDAMbC,EAAoB,mCAAG,WAAMC,GAAN,uFACXN,EAAAA,EAAAA,IAAA,+BACGC,EADH,iCACmCK,EADnC,gCADW,cAC5BJ,EAD4B,yBAI3BA,EAASC,KAAKC,SAJa,2CAAH,sDAQpBG,EAAiB,mCAAG,WAAMC,GAAN,uFACRR,EAAAA,EAAAA,IAAA,gBACZQ,EADY,oBACOP,EADP,oBADQ,cACzBC,EADyB,yBAIxBA,EAASC,MAJe,2CAAH,sDAQjBM,EAAW,mCAAG,WAAMD,GAAN,uFACFR,EAAAA,EAAAA,IAAA,gBACZQ,EADY,4BACeP,EADf,oBADE,cACnBC,EADmB,yBAIlBA,EAASC,KAAKO,MAJI,2CAAH,sDAQXC,EAAY,mCAAG,WAAMH,GAAN,uFACHR,EAAAA,EAAAA,IAAA,gBACZQ,EADY,4BACeP,EADf,2BADG,cACpBC,EADoB,yBAInBA,EAASC,KAAKC,SAJK,2CAAH,qD","sources":["pages/EditorList/EditorList.styled.jsx","pages/EditorList/EditorList.jsx","pages/Home/Home.styled.jsx","pages/Home/Home.jsx","services/Api.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  list-style-type: none;\n`;\n\nexport const Item = styled.li`\n  font-weight: 600;\n  font-size: 18px;\n  margin-bottom: 10px;\n`;\n\nexport const MovieLink = styled(Link)`\n  text-decoration: none;\n  color: #191d1e;\n\n  &:hover {\n    color: #3a28fc;\n  }\n`;\n","import { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { List, Item, MovieLink } from './EditorList.styled';\n// компонент EditorList для відображення списку фільмів\nconst EditorList = ({ films }) => {\n  // хук useLocation для отримання об'єкта локації, який зберігається у змінній location.\n  const location = useLocation();\n\n  return (\n    <List>\n      {/* Метод map, що ітерується по кожному об'єкту film в масиві films. */}\n      {films.map(film => (\n        //створюємо елемент <Item> з унікальним ключем key={film.id}\n        <Item key={film.id}>\n          {/* MovieLink створює посилання на сторінку фільму з шляхом /movies/${film.id} */}\n          {/* передає об'єкт state з властивістю from, яка містить значення location. */}\n          <MovieLink to={`/movies/${film.id}`} state={{ from: location }}>\n            {/* Текстовий вміст фільму (film.title). */}\n            {film.title}\n          </MovieLink>\n        </Item>\n      ))}\n    </List>\n  );\n};\n// перевірка на типи пропсів\nEditorList.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n    })\n  ),\n};\n\nexport default EditorList;\n","import styled from 'styled-components';\nexport const SectionTitle = styled.h2`\n  margin-top: 30px;\n  margin-bottom: 30px;\n  padding-left: 5px;\n  font-size: 30px;\n  font-weight: 600;\n  text-align: center;\n`;\n","import React, { useEffect, useState } from 'react';\n// імпортується компонент EditorList, використовується для відображення списку фільмів\nimport EditorList from 'pages/EditorList/EditorList';\n// Функція fetchTrending відповідає за здійснення запитів API для отримання популярних фільмів.\nimport { fetchTrending } from 'services/Api';\n// компонент індикатора завантаження.\nimport Loader from 'components/Loader/Loader';\nimport { SectionTitle } from './Home.styled';\n\n// стан компонента\nconst Home = () => {\n  const [films, setFilms] = useState([]);\n  const [loading, setLoading] = useState(false);\n  // Отримання популярних фільмів при монтуванні компонента\n  useEffect(() => {\n    const fetchTrendingFilms = () => {\n      setLoading(true);\n      //  функцію fetchTrending для отримання популярних фільмів,\n      //  оновлює значення films отриманими даними\n      fetchTrending()\n        .then(trendingFilms => {\n          setFilms(trendingFilms);\n        })\n        // реагує на будь-які помилки, що виникають під час запиту.\n        .catch(error => {\n          console.log(error);\n        })\n        // встановлює значення loading назад в false.\n        .finally(() => {\n          setLoading(false);\n        });\n    };\n    fetchTrendingFilms();\n  }, []);\n  // Відображення компонента\n  return (\n    <main>\n      <SectionTitle>Trending today</SectionTitle>\n      <EditorList films={films} />\n      {loading && <Loader />}\n    </main>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\n// базова URL-адреса для викликів AP\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n// ключ\nconst API_KEY = 'd6edcad997ee9c808a30a1ff00b87277';\n\n// список найпопулярніших фільмів на сьогодні для створення колекції на головній сторінці.\nexport const fetchTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\n// пошук фільму за ключовим словом на сторінці фільмів.(keyword)\nexport const fetchSearchByKeyword = async query => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n  return response.data.results;\n};\n\n// запит повної інформації про фільм для сторінки кінофільму.\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\n// запит інформації про акторський склад для сторінки кінофільму.\nexport const fetchActors = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\n// запит оглядів для сторінки кінофільму.\nexport const fetchReviews = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};\n"],"names":["List","styled","Item","MovieLink","Link","films","location","useLocation","map","film","to","id","state","from","title","SectionTitle","useState","setFilms","loading","setLoading","useEffect","fetchTrending","then","trendingFilms","catch","error","console","log","finally","EditorList","Loader","axios","API_KEY","response","data","results","fetchSearchByKeyword","query","fetchMovieDetails","movieId","fetchActors","cast","fetchReviews"],"sourceRoot":""}