{"version":3,"file":"static/js/387.216f5e1d.chunk.js","mappings":"8RAEaA,EAAUC,EAAAA,GAAAA,IAAH,qHAOPC,EAAaD,EAAAA,GAAAA,GAAH,wFAMVE,EAAWF,EAAAA,GAAAA,GAAH,yHAQRG,EAAeH,EAAAA,GAAAA,GAAH,2GAMZI,EAAWJ,EAAAA,GAAAA,IAAH,kEAKRK,EAAWL,EAAAA,GAAAA,GAAH,gDAIRM,EAAaN,EAAAA,GAAAA,EAAH,mN,SC0BvB,EAnDa,WACX,IAAQO,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAeA,OAbAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,gHAESC,EAAAA,EAAAA,IAAeP,GAFxB,gBAENG,EAFM,EAENA,KACRC,EAAQD,GAHM,gDAKdK,QAAQC,IAAR,MALc,yDAAH,qDASfH,GACD,GAAE,CAACN,KAGF,UAACR,EAAD,YACE,SAACE,EAAD,UAAY,SACXS,EAAKO,QACJ,SAACf,EAAD,UACGQ,EAAKQ,KAAI,SAAAC,GAAK,OACb,UAAChB,EAAD,CAAciB,UAAU,YAAxB,UACGD,EAAME,cACL,gBACEC,IAAG,yCAAoCH,EAAME,cAC7CE,IAAG,UAAKJ,EAAMK,KAAX,eAGL,gBACEF,IAAG,oDACHC,IAAG,UAAKJ,EAAMK,KAAX,eAGP,UAACpB,EAAD,YACE,SAACC,EAAD,UAAWc,EAAMK,QACjB,yBAAG,cAAYL,EAAMM,kBAdgBN,EAAMO,GADlC,OAqBjB,SAACpB,EAAD,UAAY,wDAMnB,C,mMC5DKqB,EAAU,6BACVC,EAAU,mCAEHC,EAAgB,mCAAG,sGACPC,EAAAA,EAAAA,IAAA,kEACsCF,IAF/B,uBACtBG,EADsB,EACtBA,KADsB,kBAIvBA,GAJuB,2CAAH,qDAOhBC,EAAgB,mCAAG,WAAMC,GAAN,yFACPH,EAAAA,EAAAA,IAAA,UAClBH,EADkB,mCACgBC,EADhB,iCACgDK,EADhD,gCADO,uBACtBF,EADsB,EACtBA,KADsB,kBAIvBA,GAJuB,2CAAH,sDAOhBG,EAAc,mCAAG,WAAM3B,GAAN,yFACLuB,EAAAA,EAAAA,IAAA,UAClBH,EADkB,oBACCpB,EADD,oBACoBqB,EADpB,oBADK,uBACpBG,EADoB,EACpBA,KADoB,kBAIrBA,GAJqB,2CAAH,sDAOdjB,EAAc,mCAAG,WAAMP,GAAN,yFACLuB,EAAAA,EAAAA,IAAA,UAClBH,EADkB,oBACCpB,EADD,4BAC4BqB,EAD5B,oBADK,uBACpBG,EADoB,EACpBA,KADoB,kBAIrBA,GAJqB,2CAAH,sDAOdI,EAAiB,mCAAG,WAAM5B,GAAN,yFACRuB,EAAAA,EAAAA,IAAA,UAClBH,EADkB,oBACCpB,EADD,6BAC6BqB,EAD7B,2BADQ,uBACvBG,EADuB,EACvBA,KADuB,kBAIxBA,GAJwB,2CAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  margin-top: 30px;\n  padding-right: 80px;\n  padding-left: 80px;\n  padding-bottom: 40px;\n`;\n\nexport const CastHeader = styled.h3`\n  font-size: 25px;\n  font-weight: 500;\n  text-align: center;\n`;\n\nexport const CastList = styled.ul`\n  margin-top: 30px;\n  display: flex;\n  align-items: center;\n  gap: 40px;\n  flex-wrap: wrap;\n`;\n\nexport const CastListItem = styled.li`\n  width: calc((100% - 4 * 40px) / 5);\n  height: 400px;\n  word-wrap: break-word;\n`;\n\nexport const CastInfo = styled.div`\n  margin-top: 20px;\n  max-width: 220px;\n`;\n\nexport const CastName = styled.h3`\n  margin-bottom: 10px;\n`;\n\nexport const NoCastText = styled.p`\n  margin: 30px auto 0 auto;\n  text-align: center;\n  padding: 20px;\n  background-color: #f8f8f8;\n  border-radius: 5px;\n  box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\n  max-width: 500px;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from '../../services/api';\nimport {\n  CastHeader,\n  CastInfo,\n  CastList,\n  CastListItem,\n  CastName,\n  NoCastText,\n  Wrapper,\n} from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const { cast } = await fetchMovieCast(movieId);\n        setCast(cast);\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    fetchCast();\n  }, [movieId]);\n\n  return (\n    <Wrapper>\n      <CastHeader>Cast</CastHeader>\n      {cast.length ? (\n        <CastList>\n          {cast.map(actor => (\n            <CastListItem className=\"cast-card\" key={actor.id}>\n              {actor.profile_path ? (\n                <img\n                  src={`https://image.tmdb.org/t/p/w200${actor.profile_path}`}\n                  alt={`${actor.name} profile`}\n                />\n              ) : (\n                <img\n                  src={`https://via.placeholder.com/200x300?text=No+Image`}\n                  alt={`${actor.name} profile`}\n                />\n              )}\n              <CastInfo>\n                <CastName>{actor.name}</CastName>\n                <p>Character: {actor.character}</p>\n              </CastInfo>\n            </CastListItem>\n          ))}\n        </CastList>\n      ) : (\n        <NoCastText>\n          We don't have any information about the cast yet.\n        </NoCastText>\n      )}\n    </Wrapper>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst baseURL = 'https://api.themoviedb.org';\nconst API_KEY = 'd6edcad997ee9c808a30a1ff00b87277';\n\nexport const fetchTrendMovies = async () => {\n  const { data } = await axios.get(\n    `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`\n  );\n  return data;\n};\n\nexport const fetchMovieByName = async query => {\n  const { data } = await axios.get(\n    `${baseURL}/3/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n  );\n  return data;\n};\n\nexport const fetchMovieById = async movieId => {\n  const { data } = await axios.get(\n    `${baseURL}/3/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};\n\nexport const fetchMovieCast = async movieId => {\n  const { data } = await axios.get(\n    `${baseURL}/3/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return data;\n};\n\nexport const fetchMovieReviews = async movieId => {\n  const { data } = await axios.get(\n    `${baseURL}/3/movie/${movieId}}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return data;\n};\n"],"names":["Wrapper","styled","CastHeader","CastList","CastListItem","CastInfo","CastName","NoCastText","movieId","useParams","useState","cast","setCast","useEffect","fetchCast","fetchMovieCast","console","log","length","map","actor","className","profile_path","src","alt","name","character","id","baseURL","API_KEY","fetchTrendMovies","axios","data","fetchMovieByName","query","fetchMovieById","fetchMovieReviews"],"sourceRoot":""}